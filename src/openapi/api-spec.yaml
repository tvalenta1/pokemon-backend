openapi: 3.0.3
info:
  title: Pokemons backend (Code Challenge)
  description: |-
    This is a backend API for Pokemon app.
  contact:
    email: tvalenta1@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Pokemons
    description: CRUD endpoints for Pokemons
  - name: Users
    description: CRUD endpoints for Users
  - name: Authentication
    description: Authentication related endpoints
security:
  - bearer_auth: []
paths:
  /pokemons:
    get:
      parameters:
        - name: name
          in: query
          description: Pokemon name
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination attribute. Amount of results to be returned
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          description: Pagination attribute. How many records to offset.
          schema:
            type: integer
            default: 0
      tags:
        - Pokemons
      summary: Get Pokemons
      description: Returns all Pokemons. It supports pagination (limit & offset attributes) and searching by pokemon name.      
      operationId: getPokemons
      responses:
        '200':
          description: Pokemons returned successfully.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total amount of results in the database. Used for pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"
    post:
      tags:
        - Pokemons
      summary: Create Pokemon
      description: Creates new Pokemon.
      operationId: createPokemon
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pokemon"
      responses:
        '201':
          description: Pokemons returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
  /pokemons/{pokemonId}:
    parameters:
      - $ref: "#/components/parameters/pokemonId"
    get:
      tags:
        - Pokemons
      summary: Get Pokemon
      description: Returns one Pokemon identified by its ID.
      operationId: getPokemon
      responses:
        '200':
          description: Pokemon returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
    patch:
      tags:
        - Pokemons
      summary: Update Pokemon
      description: Updates Pokemon attributes (one or more).
      operationId: updatePokemon
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pokemon"
      responses:
        '200':
          description: Pokemon updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
    delete:
      tags:
        - Pokemons
      summary: Delete Pokemon
      description: Deletes Pokemon identified by its ID.
      operationId: deletePokemon
      responses:
        '204':
          description: Pokemon deleted successfully.
  /pokemon_types:
    get:
      tags:
        - Pokemons
      summary: Get pokemon types
      description: Returns all pokemon types
      operationId: getPokemonTypes
      responses:
        "200":
          description: List of pokemon types was retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PokemonType"
  /users:
    get:
      tags:
        - Users
      summary: Get users
      description: Returns all users
      operationId: getUsers
      responses:
        "200":
          description: Users returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create user
      description: Creates new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required: [firstName, lastName, email, password]
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{userId}:
    parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
          schema:
            type: integer
    get:
      tags:
        - Users
      summary: Get user
      description: Returns user
      operationId: getUser
      responses:
        "200":
          description: User returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
        - Users
      summary: Update user
      description: Updates user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user
      operationId: deleteUser
      responses:
        "204":
          description: User delete successfully
  /auth:
    post:
      tags:
        - Authentication
      security: []
      summary: Authenticate
      description: Post username and password to obtain bearer token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /favorite_pokemons:
    get:
      tags:
        - Users
        - Pokemons
      summary: Get favorite pokemons
      description: Returns user's favorite pokemons. It takes the currently authenticated user (based on bearer token).
      operationId: getFavoritePokemons
      responses:
        "200":
          description: Favorite Pokemons returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"
  /favorite_pokemons/{pokemonId}:
    parameters:
        - $ref: "#/components/parameters/pokemonId"
    post:
      tags:
        - Users
        - Pokemons
      summary: Make favorite pokemon
      description: Sets pokemon to be user's favorite. User it taken from bearer token.
      operationId: setFavoritePokemon
      responses:
        "204":
          description: Pokemon successfully set user's favorite
    delete:
      tags:
        - Users
        - Pokemons
      summary: Remove favorite pokemon
      description: Removes Pokemon from user's favorites. User is taken from bearer token.
      operationId: removeFavoritePokemon
      responses:
        "204":
          description: Pokemon removed from favorites successfully
components:
  schemas:
    PokemonType:
      type: string
      enum:
        - Bug
        - Dragon
        - Electric
        - Fairy
        - Fighting
        - Fire
        - Flying
        - Ghost
        - Grass
        - Ground
        - Ice
        - Normal
        - Poison
        - Psychic
        - Rock
        - Steel
        - Water
    Pokemon:
      type: object
      properties:
        id:
          type: integer
          description: ID of the Pokemon
          readOnly: true
        name:
          type: string
          description: Name of the Pokemon
        classification:
          type: string
          description: Classification of the Pokemon
        types:
          type: array
          description: Pokemon types
          items:
            $ref: "#/components/schemas/PokemonType"
        resistant:
          type: array
          description: Resistance to Pokemon types
          items:
            $ref: "#/components/schemas/PokemonType"
        weaknesses:
          type: array
          description: Weaknesses to Pokemon types
          items:
            $ref: "#/components/schemas/PokemonType"
        weight:
          $ref: "#/components/schemas/BodyCharacteristic"
        height:
          $ref: "#/components/schemas/BodyCharacteristic"
        fleeRate:
          type: number
          format: double
        evolvesInto:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/PokemonLink"
        evolutionRequirements:
          type: object
          properties:
            amount:
              type: integer
            name:
              type: string
          nullable: true
        evolutions:
          type: array
          items:
            $ref: "#/components/schemas/PokemonLink"
          nullable: true
        previousEvolutions:
          type: array
          items:
            $ref: "#/components/schemas/PokemonLink"
          nullable: true
        maxCP:
          type: integer
          description: Maximum combat power.
        maxHP:
          type: integer
          description: Maximum hit points.
        attacks:
          type: object
          properties: 
            fast:
              type: array
              items:
                $ref: "#/components/schemas/Move"
    PokemonLink:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Move:
      type: object
      properties:
        name:
          type: string
        damage:
          type: integer
        type:
          $ref: "#/components/schemas/PokemonType"
    Attack:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/Move"
    BodyCharacteristic:
      type: object
      properties:
        minimum:
          type: string
        maximum:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID of the user
          readOnly: true
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          writeOnly: true
  parameters:
    pokemonId:
      in: path
      name: pokemonId
      required: true
      schema:
        type: integer
      description: ID of the Pokemon
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
